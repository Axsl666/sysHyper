# armv8-baremetal-demo-rust

使用rust写的armv8裸机程序，仅供学习！

## ~/.cargo/config
```shell
[target.aarch64-unknown-linux-gnu]
linker = "aarch64-linux-gnu-gcc"
rustflags = ["-C", "link-args=-nostartfiles -Tlinker.ld"]
```
其中需要安装linker：`apt-get install aarch64-linux-gnu-`
安装rust toolchain：`rustup install nightly && rustup default nightly && rustup target add aarch64-unknown-linux-gnu`

## 编译
```shell
cargo clean && cargo build --target aarch64-unknown-linux-gnu
```

## Qemu
qemu-system-aarch64 \
    -M virt \
    -m 1024M \
    -cpu cortex-a53 \
    -nographic \
    -kernel target/aarch64-unknown-linux-gnu/debug/armv8-baremetal-demo-rust
## Qemu调试
qemu-system-aarch64 \
    -M virt \
    -m 1024M \
    -cpu cortex-a53 \
    -nographic \
    -machine virtualization=on \ 
    #-machine secure=on \
    -kernel target/aarch64-unknown-linux-gnu/debug/armv8-baremetal-demo-rust \
    -S -s

PS: -machine virtualization=on开启虚拟化，则启用EL2，-machine secure=on，则启用EL3。我们只需要从EL2启动即可。
然后使用aarch64-linux-gnu-gdb -x debug.gdb。qemu默认从EL1启动virt
参考：
1. https://stackoverflow.com/questions/42824706/qemu-system-aarch64-entering-el1-when-emulating-a53-power-up
2. https://stackoverflow.com/questions/31787617/what-is-the-current-execution-mode-exception-level-etc
3. https://github.com/cirosantilli/linux-kernel-module-cheat/tree/35684b1b7e0a04a68987056cb15abd97e3d2f0cc#arm-exception-level

## 编译GDB for aarch64
1. 下载gdb source: https://ftp.gnu.org/gnu/gdb/
2. tar -xzvf xxx
3. mkdir build 
4. cd $_
5. ../configure --prefix=$PWD --target=aarch64-linux-gnu
PS: host填写自己电脑里交叉编译器的前缀，然后configure会自动寻找该前缀的编译器
6. make -j$(nproc) [CFALGS=-static CXXFLAGS=-static]

PS: --target指定要调试的程序的架构 --host指定运行gdb程序的架构